{"version":3,"sources":["../src/index.ts","../src/types.ts"],"sourcesContent":["// Types\r\nimport {\r\n  BETTING_TYPES,\r\n  Bet,\r\n  BetSlipMaxPayoutResult,\r\n  BetSlipRequest,\r\n  MAX_PAYOUT,\r\n  MAX_STAKE_AMOUNT,\r\n} from './types';\r\n\r\n/**\r\n * Calculates total odds from the given bets.\r\n * @param bets - Bets\r\n * @returns total odds\r\n */\r\nexport const calculateTotalOddsForNormalBettingSlip = (bets: Bet[]): number => {\r\n  const listOfOdds = bets.map((bet) => bet.odds);\r\n  return listOfOdds.reduce((accumulator, odds) => accumulator * odds, 1);\r\n};\r\n\r\n/**\r\n * Calculate max stake amount.\r\n * @param totalOdds - Total odds.\r\n * @param limit - Max payout limit.\r\n * @returns max stake amount\r\n */\r\nexport const calculateMaxStakeAmountForNormalBettingSlip = (\r\n  totalOdds: number,\r\n  limit = MAX_PAYOUT,\r\n): number => {\r\n  let rawStakeAmount = limit / totalOdds;\r\n  let roundedStakeAmount = +rawStakeAmount.toFixed(2);\r\n\r\n  let maxPayout = totalOdds * roundedStakeAmount;\r\n  while (maxPayout > limit) {\r\n    rawStakeAmount -= 0.01;\r\n    roundedStakeAmount = +rawStakeAmount.toFixed(2);\r\n    maxPayout = totalOdds * roundedStakeAmount;\r\n  }\r\n\r\n  return roundedStakeAmount;\r\n};\r\n\r\n/**\r\n * Generate combination type and number of combinations for system and system ways betting slips.\r\n * @param bets - Bets\r\n * @returns record with combination type and number of combinations\r\n */\r\nexport const getCombinations = (bets: Bet[]): Record<string, number> => {\r\n  const betsWithoutBankers = bets.filter((bet) => !bet.banker);\r\n  const combinations: Record<string, number> = {};\r\n  const numberOfBankers = bets.length - betsWithoutBankers.length;\r\n\r\n  for (let i = 1; i <= betsWithoutBankers.length; i++) {\r\n    const numberOfCombinations = generateCombinations(\r\n      betsWithoutBankers,\r\n      i,\r\n    ).length;\r\n    if (numberOfCombinations > 0) {\r\n      combinations[getBettingType(numberOfBankers + i)] = numberOfCombinations;\r\n    }\r\n  }\r\n\r\n  return combinations;\r\n};\r\n\r\n/**\r\n * Calculate total max payout, total stake amount and max total stake amount.\r\n * If the calculated max payout is higher then max possible payout, then max payout is set to max possible payout.\r\n * @returns max payout and total stake amount\r\n */\r\nexport const calculateMaxPayout = (\r\n  betSlipRequest: BetSlipRequest,\r\n  limit = MAX_PAYOUT,\r\n): BetSlipMaxPayoutResult => {\r\n  let maxPayout = 0;\r\n  let totalStakeAmount = 0;\r\n  let maxTotalStakeAmount = 0;\r\n  const { bets, betTypes } = betSlipRequest;\r\n\r\n  for (const bet of bets) {\r\n    if (!bet.singlesStakeAmount) continue;\r\n    const payout = bet.odds * bet.singlesStakeAmount;\r\n\r\n    maxPayout += payout < limit ? payout : limit;\r\n    totalStakeAmount += bet.singlesStakeAmount;\r\n    maxTotalStakeAmount += MAX_STAKE_AMOUNT;\r\n  }\r\n\r\n  if (betTypes?.length > 0) {\r\n    const bankerOutcomes = bets.filter((bet) => bet.banker);\r\n    const combinationOutcomes = bets.filter((bet) => !bet.banker);\r\n    for (const betType of betTypes) {\r\n      const { requiredHitCount, stakeAmountPerCombination } = betType;\r\n\r\n      const combinations = generateCombinations(\r\n        combinationOutcomes,\r\n        requiredHitCount,\r\n      );\r\n\r\n      const payout = calculateSystemMaxPayout(\r\n        combinations,\r\n        stakeAmountPerCombination,\r\n        bankerOutcomes,\r\n      );\r\n\r\n      maxPayout += payout < limit ? payout : limit;\r\n      totalStakeAmount += stakeAmountPerCombination * combinations.length;\r\n      maxTotalStakeAmount += MAX_STAKE_AMOUNT;\r\n    }\r\n  }\r\n\r\n  return { maxPayout, totalStakeAmount, maxTotalStakeAmount };\r\n};\r\n\r\n/**\r\n * Get betting type by the given number of bets.\r\n * @param numberOfBets - Number of bets\r\n * @returns betting type value\r\n */\r\nexport const getBettingType = (numberOfBets: number) => {\r\n  return BETTING_TYPES[numberOfBets - 1] ?? `${numberOfBets} Fold`;\r\n};\r\n\r\n/**\r\n * Calculate system betting slip max payout.\r\n * If the calculated max payout is higher then max possible payout, then max payout is set to max possible payout.\r\n * @param combinations - System combinations of outcomes.\r\n * @param stakeAmountPerCombination - Stake amount per combination.\r\n * @param bankerOutcomes - Banker outcomes.\r\n * @returns max payout\r\n */\r\nconst calculateSystemMaxPayout = (\r\n  combinations: Bet[][],\r\n  stakeAmountPerCombination: number,\r\n  bankerOutcomes: Bet[],\r\n): number => {\r\n  let maxPayout = 0;\r\n\r\n  for (const combination of combinations) {\r\n    const listOfOdds: number[] = [\r\n      ...bankerOutcomes.map((outcome) => outcome.odds),\r\n      ...combination.map((comb) => comb.odds),\r\n    ];\r\n    const payoutPerCombination =\r\n      listOfOdds.reduce((accumulator, odds) => accumulator * odds, 1) *\r\n      stakeAmountPerCombination;\r\n    maxPayout += payoutPerCombination;\r\n  }\r\n\r\n  return maxPayout;\r\n};\r\n\r\n/**\r\n * Generate combinations of outcomes by the given size (required hit count).\r\n * Outcomes from the same event cannot be in the combinations for system ways bets.\r\n * @param outcomes - Outcomes with details\r\n * @param size - Size of the combinations\r\n * @returns combinations\r\n */\r\nconst generateCombinations = (outcomes: Bet[], size: number): Bet[][] => {\r\n  const result: Bet[][] = [];\r\n\r\n  function generate(\r\n    currentCombo: Bet[],\r\n    start: number,\r\n    usedEventIds: Set<string>,\r\n  ): void {\r\n    if (currentCombo.length === size) {\r\n      result.push([...currentCombo]);\r\n      return;\r\n    }\r\n\r\n    for (let i = start; i < outcomes.length; i++) {\r\n      const currentOutcome = outcomes[i];\r\n\r\n      if (!usedEventIds.has(currentOutcome.eventId)) {\r\n        currentCombo.push(currentOutcome);\r\n\r\n        usedEventIds.add(currentOutcome.eventId);\r\n\r\n        generate(currentCombo, i + 1, usedEventIds);\r\n\r\n        currentCombo.pop();\r\n        usedEventIds.delete(currentOutcome.eventId);\r\n      }\r\n    }\r\n  }\r\n\r\n  generate([], 0, new Set<string>());\r\n  return result;\r\n};\r\n","export const BETTING_TYPES = ['Single', 'Double', 'Treble'];\nexport const MAX_PAYOUT = 10000.0;\nexport const MAX_STAKE_AMOUNT = 1499.0;\n\nexport type Bet = {\n  outcomeId: string;\n  eventId: string;\n  odds: number;\n  singlesStakeAmount?: number;\n  banker?: boolean;\n};\n\nexport type BetType = {\n  requiredHitCount: number;\n  stakeAmountPerCombination: number;\n};\n\nexport type BetSlipRequest = {\n  bets: Bet[];\n  betTypes?: BetType[];\n};\n\nexport type BetSlipMaxPayoutResult = {\n  maxPayout: number;\n  totalStakeAmount: number;\n  maxTotalStakeAmount: number;\n};\n"],"mappings":"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","names":[]}